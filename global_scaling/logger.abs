module Logger;

export *;

import * from Prometheus;
import * from Sys_Param;
import * from Reconfig_Param;
import * from Param;


interface ILogger {
    Unit log(Rat time, Rat start, Rat end, Map<String,Rat> metrics);
}

class Logger(PrometheusInterface prom) implements ILogger {

    
    Unit log(Rat time, Rat start, Rat end, Map<String,Rat> metrics) {
        String toPrint = toString(time * monitoring_window()); 
        Float total = float(lookupDefault(metrics,"tot",0));
        Float loss = float(lookupDefault(metrics,"rej",0));
        Float mcl = float(lookupDefault(metrics,"supp",0));
        Float inst = float(lookupDefault(metrics,"inst",0));
        Float completed = when lookupDefault(metrics,"comp",0) == 0 then -1.0 else float(lookupDefault(metrics,"comp",0));
        Float avgLat = when lookupDefault(metrics,"latency",0) == 0 then 0.01 else float(lookupDefault(metrics,"latency",0)/rat(completed));
        if (total == 0.0) {
            avgLat = 0.0; 
            completed = 0.0;
        }

        println(toString(time * monitoring_window()) +  " " + toString(avgLat * float(time_unit_to_sec())) + " measured: " +  toString(float(rat(total)/monitoring_window())) + " tot: " + toString(total) + " comp: " + toString(completed) + " rej: " + toString(loss) + " supp: " + toString(mcl) + " inst: " + toString(inst));
    }
}