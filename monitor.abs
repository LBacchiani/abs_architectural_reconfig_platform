module Monitor;

export *;

import * from Logger;
import * from Param;
import * from Reconfig_Param;
import * from Prometheus;
import * from Adaptation;
import * from Sys_Param;




class Monitor(PrometheusInterface prom, AdaptationAlgorithm alg) {

    Int dur = 0;
    ILogger logger;
    
    {
        logger = new local Logger(prom);
    }

    Unit run() {
        logger!log(dur,0,0,map[]);
        while(dur <= length(workload()) / monitoring_window()) {
            await duration(monitoring_window() * time_unit_to_sec());
            dur = dur + 1;
            Rat start = timeValue(now()) - (monitoring_window() * time_unit_to_sec());
            Rat end = timeValue(now());
            Map<String,Rat> metrics = map[];
            foreach (m in global_metrics()) {
                Rat val = await prom!getV(m, global_service_name(), start, end);
                metrics = put(metrics, m, val);
            }
            foreach (m in service_metrics()) {
                Rat val = 0;
                foreach (s in services()) {
                    Rat tmp = await prom!getV(m, s, start, end);
                    val = val + tmp;
                }
                metrics = put(metrics, m, val);
            }
            prom!flush();
            if (threshold(metrics)) alg!adapt(metrics);
            logger!log(dur,start,end,metrics);
        }
    }
}