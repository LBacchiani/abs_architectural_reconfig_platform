module Prometheus;

export *;

import * from Reconfig_Param;
import * from Architecture;
import * from Param;


interface Metric {
    Pair<String,String> id();
    List<Pair<Rat,Rat>> values(); //list of (value,timestamp)
   [Atomic] Unit push(Rat val);
   Unit flush();
}

class DiscreteMetric(Pair<String,String> id) implements Metric {
    List<Pair<Rat,Rat>> values = list[];
    Pair<String,String> id() {return id;}
    List<Pair<Rat,Rat>> values() { return values; }
    [Atomic] Unit push(Rat val)  { values = appendright(values,Pair(val,timeValue(now()))); }
    Unit flush() { values = filter((Pair<Rat,Rat> p) => snd(p) > timeValue(now()) - (monitoring_window() * time_unit_to_sec()))(values);}

}

class InstantMetric(Pair<String,String> id) implements Metric {
    List<Pair<Rat,Rat>> values = list[];
    Pair<String,String> id() {return id;}
    List<Pair<Rat,Rat>> values() { return values; }
    [Atomic] Unit push(Rat val)  { values = list[Pair(val,timeValue(now()))]; }
    Unit flush() { }
}




interface PrometheusInterface {
    [Atomic] Unit register(List<Metric> ms);
    Rat getV(String metric, String key, Rat start, Rat end);
    Unit flush();
}


class Prometheus() implements PrometheusInterface {

    List<Metric> metrics = list[];

    [Atomic] Unit register(List<Metric> ms) {
        metrics = concatenate(metrics,ms);
    }

    Unit flush() { 
        foreach (m in metrics) await m!flush();
    }

    Rat getV(String metric, String key, Rat start, Rat end) {
        List<Metric> matches = this.getMetrics(metric,key);
        Rat toRet = 0;
        foreach (m in matches) {
            List<Pair<Rat,Rat>> values = m.values();
            if (length(values) == 1) toRet = toRet + fst(nth(values,0));
            else {
                values = filter((Pair<Rat,Rat> p) => snd(p) >= start && snd(p) < end)(values);
                toRet = toRet + foldl((Pair<Rat,Rat> m, Rat acc) => fst(m) + acc)(values,0);
            }
        }
        return toRet;
    }

    List<Metric> getMetrics(String metric, String key) {
        List<Metric> found = list[];
        Int i = 0;

        while (i < length(metrics)) {
            Metric curr = nth(metrics,i);
            Pair<String,String> id = curr.id();
            if (id == Pair(metric,key)) {
                found = appendright(found,curr);
            }
            i = i + 1;
        }
        return found;
    }
}